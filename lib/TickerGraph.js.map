{"version":3,"file":"TickerGraph.js","sources":["../src/TickerGraph.ts"],"sourcesContent":["interface CallbackData {\n\tincrement: number;\n\tmaxIncrement: number;\n\tcurMaxIncrement: number;\n\tratio: number;\n\tprevRatio: number | null;\n\tmaxValue: number;\n\tminValue: number;\n}\n\n/**\n * Callback used for setting per-line color\n *\n * @callback ColorCallback\n * @param {Object} increment, maxIncrement, ratio, prevRatio, maxValue, minValue\n */\n\ntype ColorCallback = (data: CallbackData) => string;\n\ninterface TickerGraphOptions {\n\tcolor: string | ColorCallback;\n\tbottomOffsetPx: number;\n\tclearOnDraw: boolean;\n}\n\nexport default class TickerGraph {\n\n\tprotected context: CanvasRenderingContext2D | null = null;\n\tprotected stack: number[] = [];\n\n\tprotected lastPush: number | null = null;\n\n\tprotected options: TickerGraphOptions = {\n\t\tbottomOffsetPx: 0,\n\t\tcolor:          \"#7c0\",\n\t\tclearOnDraw:    true,\n\t};\n\n\t/**\n\t * @param {Node} tickerCanvas The canvas element to draw to\n\t * @param {Object} options The optional settings.\n\t * @constructor\n\t */\n\tconstructor(protected canvas: HTMLCanvasElement, options: Partial<TickerGraphOptions> = {}) {\n\t\tthis.setCanvas(canvas);\n\t\tthis.options = { ...this.options, ...options };\n\t}\n\n\t/**\n\t * Push a number value into the display stack and trigger a redraw\n\t *\n\t * @param {number} val The number to push\n\t */\n\tpublic push(val: number) {\n\t\tthis.lastPush = val;\n\t\tthis.stack.push(val);\n\t\tif (this.stack.length > this.stackLength()) {\n\t\t\tthis.stack.shift();\n\t\t}\n\t\tthis.draw();\n\t}\n\n\tprivate stackLength(): number {\n\t\tconst l = this.canvas.width || this.canvas.offsetWidth;\n\t\tif (l <= 0) {\n\t\t\tthrow new Error(`Invalid stack length: ${l}`);\n\t\t}\n\n\t\treturn l;\n\t}\n\n\tprivate getContext(): CanvasRenderingContext2D {\n\t\tif (this.context) {\n\t\t\treturn this.context;\n\t\t}\n\n\t\tthis.context = this.canvas.getContext(\"2d\");\n\t\tif (!this.context) {\n\t\t\tthrow new Error(\"Failed to get 2d context\");\n\t\t}\n\n\t\treturn this.context;\n\t}\n\n\t/**\n\t * @access private\n\t */\n\tprivate draw() {\n\t\tconst stackLength = this.stackLength();\n\n\t\tif (this.options.clearOnDraw) {\n\t\t\tthis.canvas.width = this.canvas.width + 0;\n\t\t}\n\n\t\tconst c = this.getContext();\n\t\tconst h = this.canvas.height || this.canvas.offsetHeight;\n\t\tif (!h) {\n\t\t\tthrow new Error(`Invalid canvas height: ${h}`);\n\t\t}\n\n\t\tconst xOffset = stackLength - this.stack.length;\n\n\t\tconst max = this.max();\n\t\tconst min = this.min();\n\n\t\tif (typeof this.options.color == \"string\") {\n\t\t\tc.strokeStyle = this.options.color;\n\t\t}\n\n\t\tlet lastRatio = null;\n\t\tfor (let i = 0; i <= this.stack.length; i++) {\n\n\t\t\tconst val = this.stack[i];\n\t\t\tlet ratio = ((val - min) / (max - min));\n\n\t\t\tif (isNaN(ratio)) {\n\t\t\t\tratio = 0;\n\t\t\t}\n\n\t\t\tconst scaled = ratio * h;\n\n\t\t\tif (typeof this.options.color === \"function\") {\n\t\t\t\t// @todo update this to be pretty scaled.\n\t\t\t\tconst data: CallbackData = {\n\t\t\t\t\tincrement: i,\n\n\t\t\t\t\tcurMaxIncrement: this.stack.length,\n\t\t\t\t\tmaxIncrement:    stackLength,\n\n\t\t\t\t\tprevRatio: lastRatio,\n\t\t\t\t\tratio,\n\n\t\t\t\t\tmaxValue: max,\n\t\t\t\t\tminValue: min,\n\t\t\t\t};\n\t\t\t\tc.strokeStyle = this.options.color(data);\n\t\t\t}\n\n\t\t\tc.beginPath();\n\t\t\tc.moveTo(xOffset + i, h);\n\n\t\t\tc.lineTo(xOffset + i, (h - this.options.bottomOffsetPx) - scaled);\n\t\t\tc.closePath();\n\t\t\tc.stroke();\n\n\t\t\tlastRatio = ratio;\n\t\t}\n\t}\n\n\t/**\n\t * @access private\n\t * @returns {number}\n\t */\n\tprotected max(): number {\n\t\treturn Math.max(...this.stack);\n\t}\n\n\t/**\n\t * @access private\n\t * @returns {number}\n\t */\n\tprotected min(): number {\n\t\treturn Math.min(...this.stack);\n\t}\n\n\t/**\n\t * Set the color either as a string (eg \"#333\" or \"rgba(0,0,0,50)\")\n\t * or pass a ColorCallback which is called per line\n\t *\n\t * @param {string|ColorCallback} color\n\t */\n\tpublic setColor(color: string | ColorCallback) {\n\t\tthis.options.color = color;\n\t}\n\n\t/**\n\t * Change the canvas element\n\t *\n\t * @param {Object} tickerCanvas The canvas element to draw to\n\t */\n\tpublic setCanvas(tickerCanvas: HTMLCanvasElement) {\n\t\tthis.canvas = tickerCanvas;\n\t\tthis.context = null;\n\t}\n}\n"],"names":[],"mappings":"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"}